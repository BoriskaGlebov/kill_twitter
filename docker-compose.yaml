services:
  db:
    image: postgres:16
    container_name: postgres_diploma
    restart: always
    env_file:
      - .env  # Используем переменную окружения для выбора файла .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      #      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_DB},${POSTGRES_DB3}
      POSTGRES_DB: ${DB_NAME}
      TZ: Europe/Moscow
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      #      - ./pg_logs/:/var/lib/postgresql/logs # Подключение папки для логов,в будущем можно подключить в хранилище докера
      #для нормального просмотра содержимого логов нужно  sudo chown 999:999 -R pg_logs/ && sudo сhmod -R 777 pg_logs/
    #      - ./postgresql.conf:/etc/postgresql/postgresql.conf # Подключение конфигурационного файла
    #    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    command: >
      sh -c "
        docker-entrypoint.sh postgres &
        until pg_isready -U ${DB_USER}; do sleep 1; done;
        psql -U ${DB_USER} -d ${DB_NAME} -c 'CREATE DATABASE test_kill_twitter;'
        wait"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - monitoring_net


  kill_twitter:
      container_name: kill_twitter
      build:
        context: .
        dockerfile: Dockerfile  # Указываем путь к Dockerfile
      depends_on:
        - db
      restart: always
      environment:
        ENV: docker #спеуиально устанвливается такая переменная чтоб брались данные из файла с натройками для докера
      ports:
        - "8000:8000"  # Пробрасываем порт 80 контейнера на порт 80 хоста
      networks:
        - monitoring_net
      deploy:
        resources:
          limits:
            cpus: '1'
            memory: 512M
          reservations:
            memory: 256M
      volumes:
        - static_files1:/python_advanced_diploma/app/static
        - static_files2:/python_advanced_diploma/app/templates

  nginx:
    image: nginx:latest
    container_name: nginx_static
    ports:
      - "80:80"
#      - "81:81"  # Проброс порта для доступа к Nginx
#      - "80:80"   # я на локлаьной машине тестировал на 81 порту
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf  # Ваш файл конфигурации Nginx
      - static_files1:/usr/src/app/static # Подключение статических файлов
      - static_files2:/usr/src/app/templates  # Подключение шаблонов Jinja2
    #      - ./nginx.conf:/etc/nginx/nginx.conf  # Ваш файл конфигурации Nginx
    depends_on:
      - kill_twitter
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - monitoring_net
#

volumes:
  pg_data:
    name: diploma_db
  static_files1:
    name: static_files1
  static_files2:
    name: static_files2

networks:
  monitoring_net:
    name: monitoring_net
#    external: true
