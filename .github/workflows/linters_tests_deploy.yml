name: Linters Pipeline

on:
  push:
    branches:
      - main
      - dev2
  pull_request:
    branches:
      - main
      - dev2

jobs:
  mypy:
    runs-on: ubuntu-latest
    #      needs: test  # This job depends on the setup job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run MyPy type checking
        run: mypy .

  black:
    runs-on: ubuntu-latest
    #      needs: mypy  # This job depends on the setup job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black formatting check
        run: black --diff --check .

  isort:
    runs-on: ubuntu-latest
    #      needs: black  # This job depends on the setup job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Isort check
        run: isort --check-only .

  flake8:
    runs-on: ubuntu-latest
    #      needs: isort
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Flake8 linting
        run: flake8 .

  tests:
    runs-on: ubuntu-latest
    needs: [ mypy, black, isort, flake8 ]  # Зависит от всех линтеров
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'  # Укажите версию Python

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: .env file create
        run: |
          echo "Creating .env file"
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_TEST=${{ secrets.DB_TEST }}" >> .env
          echo "UPLOAD_DIRECTORY=${{ secrets.UPLOAD_DIRECTORY }}" >> .env
          echo "PYTHONPATH=${{ secrets.PYTHONPATH }}" >> .env

      - name: .env file check
        run: |
          echo "Contents of .env file:"
          cat .env

      - name: .env.docker file create
        run: |
          echo "Creating .env.docker file"
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env.docker
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.docker
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.docker
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.docker
          echo "DB_NAME=${{ secrets.DB_NAME_DOCKER }}" >> .env.docker
          echo "DB_TEST=${{ secrets.DB_TEST }}" >> .env.docker
          echo "UPLOAD_DIRECTORY=${{ secrets.UPLOAD_DIRECTORY }}" >> .env.docker
          echo "PYTHONPATH=${{ secrets.PYTHONPATH }}" >> .env.docker

      - name: .env.docker file check
        run: |
          echo "Contents of .env.docker file:"
          cat .env.docker
#
#      - name: Build and run Docker Compose
#        run: |
#          docker compose up --build -d

#
#      - name: Run tests
#        run: pytest  # Или другая команда для запуска тестов, если вы используете другую библиотеку тестирования.
