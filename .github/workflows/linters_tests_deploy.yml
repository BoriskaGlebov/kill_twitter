name: Linters Pipeline

on:
  push:
    branches:
      - main
      - dev2
  pull_request:
    branches:
      - main
      - dev2

jobs:
  mypy:
    runs-on: ubuntu-latest
    #      needs: test  # This job depends on the setup job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run MyPy type checking
        run: mypy .

  black:
    runs-on: ubuntu-latest
    #      needs: mypy  # This job depends on the setup job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black formatting check
        run: black --diff --check .

  isort:
    runs-on: ubuntu-latest
    #      needs: black  # This job depends on the setup job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Isort check
        run: isort --check-only .

  flake8:
    runs-on: ubuntu-latest
    #      needs: isort
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Flake8 linting
        run: flake8 .

  tests:
    runs-on: ubuntu-latest
    needs: [ mypy, black, isort, flake8 ]  # Зависит от всех линтеров
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'  # Укажите версию Python

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: .env file create
        run: |
          echo "Creating .env file"
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_TEST=${{ secrets.DB_TEST }}" >> .env
          echo "UPLOAD_DIRECTORY=${{ secrets.UPLOAD_DIRECTORY }}" >> .env
          echo "PYTHONPATH=${{ secrets.PYTHONPATH }}" >> .env

      - name: .env file check
        run: |
          echo "Contents of .env file:"
          cat .env

      - name: .env.docker file create
        run: |
          echo "Creating .env.docker file"
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env.docker
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.docker
          echo "DB_HOST=${{ secrets.DB_HOST_DOCKER }}" >> .env.docker
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.docker
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env.docker
          echo "DB_TEST=${{ secrets.DB_TEST }}" >> .env.docker
          echo "UPLOAD_DIRECTORY=${{ secrets.UPLOAD_DIRECTORY }}" >> .env.docker
          echo "PYTHONPATH=${{ secrets.PYTHONPATH }}" >> .env.docker

      - name: .env.docker file check
        run: |
          echo "Contents of .env.docker file:"
          cat .env.docker

      - name: Build and run Docker Compose
        run: |
          docker compose up --build -d

      - name: Run Alembic Migrations
        run: |
          sleep 10
          alembic -x db=test upgrade head
      - name: Check Alembic Migrations
        run: |
          alembic current

      - name: Run unit tests
        id: retry_step
        run: |
          for i in {1..3}; do
            echo "Attempt $i"
            # Замените следующую строку на вашу команду
            python -m pytest tests && break || sleep 5
          done

  deploy:
    runs-on: ubuntu-latest
    needs: tests  # Зависит от успешного завершения job tests.
    if: github.ref == 'refs/heads/main'  # Выполняется только для ветки main.
    steps:
        - name: Checkout repository
          uses: actions/checkout@v4  # Клонирование репозитория

        - name: Set up SSH key
          uses: webfactory/ssh-agent@v0.5.3  # Настройка SSH-ключа
          with:
            ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}  # Приватный ключ из секретов

        - name: Add known hosts
          run: echo "${{ secrets.SERVER_IP }} $(ssh-keyscan -H ${{ secrets.SERVER_IP }})" >> ~/.ssh/known_hosts  # Добавление сервера в known_hosts
        - name: Test SSH connection
          run: |
            ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "whoami" && echo PRIVET # Проверка подключения

#        - name: .env.docker file create
#          run: |
#            echo "Creating .env.docker file"
#            echo "DB_USER=${{ secrets.DB_USER }}" >> .env.docker
#            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.docker
#            echo "DB_HOST=${{ secrets.DB_HOST_DOCKER }}" >> .env.docker
#            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.docker
#            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env.docker
#            echo "DB_TEST=${{ secrets.DB_TEST }}" >> .env.docker
#            echo "UPLOAD_DIRECTORY=${{ secrets.UPLOAD_DIRECTORY }}" >> .env.docker
#            echo "PYTHONPATH=${{ secrets.PYTHONPATH }}" >> .env.docker

        - name: Deploy to server
          run: |
            ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd production/kill_twitter || exit  # Переход в директорию приложения
            git pull origin main            # Обновление кода из репозитория
            echo "Creating .env file"
            echo rm -f .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "DB_TEST=${{ secrets.DB_TEST }}" >> .env
            echo "UPLOAD_DIRECTORY=${{ secrets.UPLOAD_DIRECTORY }}" >> .env
            echo "PYTHONPATH=${{ secrets.PYTHONPATH }}" >> .env
            echo "Creating .env.docker file"
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env.docker
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.docker
            echo "DB_HOST=${{ secrets.DB_HOST_DOCKER }}" >> .env.docker
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.docker
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env.docker
            echo "DB_TEST=${{ secrets.DB_TEST }}" >> .env.docker
            echo "UPLOAD_DIRECTORY=${{ secrets.UPLOAD_DIRECTORY }}" >> .env.docker
            echo "PYTHONPATH=${{ secrets.PYTHONPATH }}" >> .env.docker
            docker compose down  # Остановка текущих контейнеров (если они запущены)
            docker compose up -d
            EOF
